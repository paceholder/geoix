//------------------------------------------------------------------------
//    This file is part of Geoix.
//
//    Copyright (C) 2010 Dmitriy Pinaev
//
//    Geoix is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Geoix is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
//
//    e-mail: prof-x@inbox.ru
//------------------------------------------------------------------------


#ifndef VISUAL_OBJECT_H
#define VISUAL_OBJECT_H

#include "tree_object.h"
#include "size.h"

#include "scene_3d.h"

class QPaintDevice;


/// Base class for all obects that could be rendered in 2d and 3d render panels
class gxVisualObject : public gxTreeObject
{
    Q_OBJECT

public:
    /// Constructor
    gxVisualObject(gxTreeObjectFolder* parent)
        : gxTreeObject(parent)
    {
        gl_list_3d = 0;
        gl_list_2d = 0;
        widgetItem->setCheckState(0, Qt::Unchecked);
    }

    /// Destructor. Emits signal which make
    /// differen objects know than pointer to this visual object
    /// is no longer valid.
    /// \todo That's dirty hack.
    virtual ~gxVisualObject()
    {
        emit objectDelete();
    }

    virtual void draw2D() = 0;
    virtual void draw3D() = 0;
    virtual void recalcSize() = 0;

    /// After various changes gl render lists must be rebuilt.
    virtual void recreateDisplayList()
    {
        glDeleteLists(gl_list_3d, 1);
        gl_list_3d = 0;

        glDeleteLists(gl_list_2d, 1);
        gl_list_2d= 0;
    }

    QColor getColor() { return this->color; }


    /// Gets and sets size of the object
    const gxSize3D& getSize() { return size3d; }
    void setSize(const gxSize3D& size) { this->size3d = size; }

public slots:
    virtual void importFromFile() = 0;
    virtual void clearData() = 0;
    virtual void options() = 0;

signals:
    void objectDelete();

protected:
    gxSize3D size3d;
    bool visible;
    QColor color;


    /// Gl list containing all 3d graphics generated by this object
    unsigned int gl_list_3d;
    /// Gl list containing all 2d graphics generated by this object
    unsigned int gl_list_2d;


    /// Generates random color for each object just after its creation
    void setRandomColor()
    {
        srand((unsigned)time(0));
        double r = (double)rand()/(double)(RAND_MAX-1);
        double g = (double)rand()/(double)(RAND_MAX-1);
        double b = (double)rand()/(double)(RAND_MAX-1);
        r *= 0.7; g *= 0.7; b *= 0.7;

        color.setRgbF(0.3 + r, 0.3 + g, 0.3 + b);
    }

    /// Changes color of text of widgetItem.
    /// Gray means than object doesn't contain any data.
    /// Black means than data is loaded.
    void updateWidgetItemState()
    {

        if (hasData())
            widgetItem->setData(0, Qt::TextColorRole, Qt::black);
        else
            widgetItem->setData(0, Qt::TextColorRole, Qt::gray);
    }

    /// Reimplemented in subclasses
    virtual bool hasData() = 0;
};

#endif // VISUAL_OBJECT_H
